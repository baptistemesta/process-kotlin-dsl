/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.bonitasoft.engine.dsl.process

import com.bonitasoft.engine.dsl.process.ExpressionDSLBuilder.ExpressionDSLBuilderObject.caseId
import com.winterbe.expekt.should
import org.bonitasoft.engine.bpm.flownode.MessageEventTriggerDefinition
import org.spekframework.spek2.Spek
import org.spekframework.spek2.style.specification.describe

object EventTest : Spek({

    describe("A process DSL with start event") {

        val process = process("MyProcess", "1.0") {
            start("startEvent")
        }
        val processDefinition = process.export().processDefinition

        it("should have the right name and version") {
            processDefinition.flowElementContainer.startEvents.should.have.size(1)
            processDefinition.flowElementContainer.startEvents[0].name.should.equal("startEvent")
            processDefinition.flowElementContainer.startEvents[0].eventTriggers.should.be.empty
        }
    }

    describe("A process DSL with start message event") {

        val process = process("MyProcess", "1.0") {
            startMessage("startEvent"){
                message("startMessage")
            }
            automaticTask("task")
            transitions {
                "startEvent" to "task"
            }
        }
        val processDefinition = process.export().processDefinition

        it("should have the right name and version") {
            processDefinition.flowElementContainer.startEvents.should.have.size(1)
            processDefinition.flowElementContainer.startEvents[0].name.should.equal("startEvent")
            (processDefinition.flowElementContainer.startEvents[0].eventTriggers[0] as MessageEventTriggerDefinition)
                    .messageName.should.equal("startMessage")
        }
    }
    describe("A process DSL with catch message event having correlations") {

        val process = process("MyProcess", "1.0") {
            catchMessage("myEvent"){
                message("messageName"){
                    correlations{
                        "caseId" shouldMatch caseId
                    }
                }
            }
        }
        val processDefinition = process.export().processDefinition

        it("should have the right name and version") {
            processDefinition.flowElementContainer.intermediateCatchEvents.should.have.size(1)
            processDefinition.flowElementContainer.intermediateCatchEvents[0].name.should.equal("myEvent")
            val messageEventTriggerDefinition = processDefinition.flowElementContainer.intermediateCatchEvents[0].eventTriggers[0] as MessageEventTriggerDefinition
            messageEventTriggerDefinition.messageName.should.equal("messageName")
            messageEventTriggerDefinition.correlations.map { it.key.content to it.value.content }.should.contain.all.elements(
                    "caseId" to "processInstanceId"
            )
        }
    }
    describe("A process DSL with throw message event having correlations") {

        val process = process("MyProcess", "1.0") {
            throwMessage("myEvent"){
                message("messageName"){
                    targetProcess = "My other process"
                    correlations(
                            "correlation1" to "value1",
                            "correlation2" to "value2",
                            "correlation3" to "value3",
                            "correlation4" to "value4",
                            "correlation5" to "value5"
                    )
                }
            }
        }
        val processDefinition = process.export().processDefinition

        it("should have the right name and version") {
            processDefinition.flowElementContainer.intermediateThrowEvents.should.have.size(1)
            processDefinition.flowElementContainer.intermediateThrowEvents[0].name.should.equal("myEvent")
            val messageEventTriggerDefinition = processDefinition.flowElementContainer.intermediateThrowEvents[0].eventTriggers[0] as MessageEventTriggerDefinition
            messageEventTriggerDefinition.messageName.should.equal("messageName")
            messageEventTriggerDefinition.correlations.map { it.key.content to it.value.content }.should.contain.all.elements(
                    "correlation1" to "value1",
                    "correlation2" to "value2",
                    "correlation3" to "value3",
                    "correlation4" to "value4",
                    "correlation5" to "value5"
            )
        }
    }
})
