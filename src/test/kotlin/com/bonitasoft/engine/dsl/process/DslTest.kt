/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.bonitasoft.engine.dsl.process

import com.bonitasoft.engine.dsl.process.DataType.Companion.boolean
import com.bonitasoft.engine.dsl.process.DataType.Companion.custom
import com.bonitasoft.engine.dsl.process.DataType.Companion.string
import com.winterbe.expekt.should
import org.bonitasoft.engine.bpm.flownode.AutomaticTaskDefinition
import org.spekframework.spek2.Spek
import org.spekframework.spek2.style.specification.describe

object DslTest : Spek({

    describe("A process DSL containing tasks") {

        val process = process("MyProcess", "1.0") {
            automaticTask("Step1")
            val step2 = automaticTask("Step2")
            val step3 = automaticTask("Step3")
            transitions{
                "Step1" to "Step2"
                step2 to step3
            }

        }
        val processDefinition = process.export().processDefinition

        it("should have the right name and version") {
            processDefinition.name.should.equal("MyProcess")
            processDefinition.version.should.equal("1.0")
        }

        it("should have 2 automatic task") {
            processDefinition.flowElementContainer.activities.forEach {
                it.should.satisfy { e -> e is AutomaticTaskDefinition }
            }
        }
        it("should have 2 steps with the right name") {
            processDefinition.flowElementContainer.activities.should.have.size(3)
        }
        it("should have transition between step1 and step2") {
            val step1 = processDefinition.flowElementContainer.getActivity("Step1")
            step1.outgoingTransitions.should.have.size(1)
            step1.outgoingTransitions[0].targetFlowNode.name.should.equal("Step2")
        }
    }

    describe("A process DSL with parallel gateway") {

        val process = process("MyProcess", "1.0") {

            parallelGateway("gate1")
            automaticTask("Step1")
            automaticTask("Step2")
            automaticTask("Step3")

            transitions {
                from("gate1"){
                    to("Step1")
                    to("Step2")
                    to("Step3")
                }
            }
        }
        val processDefinition = process.export().processDefinition

        it("should have the parallel gateway with step1, step2 and step3") {
            processDefinition.flowElementContainer.getFlowNode("gate1").outgoingTransitions.should.have.size.equal(3)
        }
    }
    describe("A process DSL with exclusive gateway") {

        val process = process("MyProcess", "1.0") {
            exclusiveGateway("gate1")
            transitions {
                from("gate1") {
                    to("Step1").isDefault()
                    to("Step2").condition{
                        constant(true)
                    }
                    to("Step3").condition{
                        groovy("return true")
                    }
                }
            }
            automaticTask("Step1")
            automaticTask("Step2")
            automaticTask("Step3")
        }
        val processDefinition = process.export().processDefinition

        it("should have the parallel gateway with step1, step2 and step3") {
            processDefinition.flowElementContainer.getFlowNode("gate1").outgoingTransitions.should.have.size.equal(2)
            processDefinition.flowElementContainer.getFlowNode("gate1").defaultTransition.should.not.be.`null`
            processDefinition.flowElementContainer.getFlowNode("gate1").outgoingTransitions.find{it.targetFlowNode.name == "Step2"}!!.condition.should.not.be.`null`
            processDefinition.flowElementContainer.getFlowNode("gate1").outgoingTransitions.find{it.targetFlowNode.name == "Step3"}!!.condition.should.not.be.`null`


        }
    }

    describe("A process DSL with data") {
        it("should add data on a process") {
            val process = process("MyProcess", "1.0") {
                data {
                    name = "myObject"
                    type = custom("com.bonitasoft.MyObject")
                }
                data {
                    name = "myStringData"
                    type = string()
                    initialValue {
                        groovy("myObject.value", "java.lang.String") {
                            dataRef("myObject")
                        }
                    }
                }
                data {
                    name = "boolData"
                    type = boolean()
                    initialValue {
                        constant(true)
                    }
                }
                automaticTask("myTask") {
                    data {
                        name = "groovyData"
                        type = string()
                        initialValue {
                            groovy("boolData + myStringData + myObject", "java.lan.String") {
                                dataRef("boolData")
                                dataRef("myStringData")
                                dataRef("myObject")
                            }
                        }
                    }
                }

            }

            val processDefinition = process.export().processDefinition
            processDefinition.flowElementContainer.dataDefinitions.should.have.size(3)
            processDefinition.flowElementContainer.getActivity("myTask").dataDefinitions.should.have.size(1)
        }

    }
})
